{"status":{},"product_version":"2.7.1.1","spec":{"description":"","resources":{"client_attrs":{"1299c8e2_deployment":{"y":214,"x":412}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"182330fb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1332f4c4_runbook","main_task_local_reference":{"kind":"app_task","name":"182330fb_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"184c213c_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"cddbd539_runbook","main_task_local_reference":{"kind":"app_task","name":"184c213c_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"d109c251_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4bec15af_runbook","main_task_local_reference":{"kind":"app_task","name":"d109c251_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7e733268_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"a7343de9_runbook","main_task_local_reference":{"kind":"app_task","name":"7e733268_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"f2a77d80_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"bf9d0703_runbook","main_task_local_reference":{"kind":"app_task","name":"f2a77d80_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"PrismCentralService","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_vlan_id","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ahv_network_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"nutanix_cluster_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"nutanix_calm_user_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"directory_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ad_group_name","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ad_group_dn","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ad_group_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"environment_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"consumer_role_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"developer_role_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_admin_role_uuid","value":"","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_name","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_uuid","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"ahv_network_name","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"prod_cluster_name","value":"Lancelot","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"dev_cluster_name","value":"Lancelot","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[],"type":"EXISTING_VM","name":"PrismCentralVM","readiness_probe":{"connection_type":"SSH","retries":"5","disable_readiness_probe":true,"address":"@@{ip_address}@@","delay_secs":"60","connection_port":22},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{pc_ip}@@"},"variable_list":[]}],"credential_definition_list":[{"username":"api_user","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"pc"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"PrismCentralService"}],"name":"Package1","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"GetAdUserUuid"},{"kind":"app_task","name":"GetClusterUuid"},{"kind":"app_task","name":"GetCalmRolesUuid"},{"kind":"app_task","name":"GetCalmEnvUuid"},{"kind":"app_task","name":"GetUserProjects"},{"kind":"app_task","name":"GetAhvNetwork"},{"kind":"app_task","name":"NewAhvNetwork"},{"kind":"app_task","name":"NewCalmProject"},{"kind":"app_task","name":"GetAdGroup"},{"kind":"app_task","name":"GetAdGroupUuid"},{"kind":"app_task","name":"SetCalmProjectAcp"},{"kind":"app_task","name":"SetCalmProjectBp"},{"kind":"app_task","name":"Readme"}],"name":"826e1ad1_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"GetClusterUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetAhvNetwork"}},{"from_task_reference":{"kind":"app_task","name":"GetAhvNetwork"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"NewAhvNetwork"}},{"from_task_reference":{"kind":"app_task","name":"GetAdGroup"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetAdGroupUuid"}},{"from_task_reference":{"kind":"app_task","name":"NewAhvNetwork"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"NewCalmProject"}},{"from_task_reference":{"kind":"app_task","name":"GetCalmEnvUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"NewCalmProject"}},{"from_task_reference":{"kind":"app_task","name":"NewAhvNetwork"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetAdGroup"}},{"from_task_reference":{"kind":"app_task","name":"GetAdUserUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"}},{"from_task_reference":{"kind":"app_task","name":"GetCalmRolesUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"}},{"from_task_reference":{"kind":"app_task","name":"GetAdGroupUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"}},{"from_task_reference":{"kind":"app_task","name":"NewCalmProject"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"}},{"from_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectBp"}},{"from_task_reference":{"kind":"app_task","name":"GetClusterUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"}},{"from_task_reference":{"kind":"app_task","name":"SetCalmProjectBp"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"Readme"}},{"from_task_reference":{"kind":"app_task","name":"GetUserProjects"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"NewCalmProject"}},{"from_task_reference":{"kind":"app_task","name":"GetUserProjects"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"NewAhvNetwork"}},{"from_task_reference":{"kind":"app_task","name":"GetAdUserUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"GetUserProjects"}},{"from_task_reference":{"kind":"app_task","name":"GetAdUserUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"NewCalmProject"}},{"from_task_reference":{"kind":"app_task","name":"GetAdUserUuid"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"SetCalmProjectAcp"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetAdUserUuid","state":"ACTIVE","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     Bogdan-Nicolae.MITU@ext.eeas.europa.eu,\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/17\n# task_name:    GetAdUserUuid\n# description:  Returns the Prism Central object uuid of the Calm user and its\n#               directory service.\n# output vars:  nutanix_calm_user_uuid, directory_uuid\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nnutanix_calm_user_upn = \"@@{calm_username}@@\"\n# endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/users\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\":\"user\",\n    \"length\":length,\n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['length']))\n    for directory_user in json_resp['entities']:\n        if nutanix_calm_user_upn == directory_user['status']['name']:\n            nutanix_calm_user_uuid = directory_user['metadata']['uuid']\n            directory_uuid = directory_user['spec']['resources']['directory_service_user']['directory_service_reference']['uuid']\n            print(\"nutanix_calm_user_uuid={}\".format(nutanix_calm_user_uuid))\n            print(\"directory_uuid={}\".format(directory_uuid))\n            exit(0)\n    while json_resp['metadata']['length'] is length:\n        payload = {\n            \"kind\": \"user\",\n            \"length\":length,\n            \"offset\": json_resp['metadata']['length'] + json_resp['metadata']['offset'] + 1\n        }\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['offset'] + json_resp['metadata']['length']))\n            #TODO: see if user matches here\n            for directory_user in json_resp['entities']:\n                if calm_user_upn == directory_user['status']['name']:\n                    calm_user_uuid = directory_user['metadata']['uuid']\n                    directory_uuid = directory_user['spec']['resources']['directory_service_user']['directory_service_reference']['uuid']\n                    print(\"nutanix_calm_user_uuid={}\".format(nutanix_calm_user_uuid))\n                    print(\"directory_uuid={}\".format(directory_uuid))\n                    exit(0)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","eval_variables":["nutanix_calm_user_uuid","directory_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetClusterUuid","state":"ACTIVE","attrs":{"exit_status":[],"script":"# region headers\n# escript-template v20190605 \/ stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/17\n# task_name:    PcGetClusterUuid\n# description:  Gets the UUID of the specified cluster.\n# output vars:  nutanix_cluster_uuid\n# endregion\n\n# region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\nproject_type = \"@@{project_type}@@\"\npc_ip = \"@@{pc_ip}@@\"\nprod_cluster_name = \"@@{prod_cluster_name}@@\"\ndev_cluster_name = \"@@{dev_cluster_name}@@\"\n# endregion\n\n# region define variables\nif project_type is \"Production\":\n    nutanix_cluster_name = prod_cluster_name\nif project_type is \"Dev\":\n    nutanix_cluster_name = dev_cluster_name\n# endregion\n\n# region Get AHV cluster UUID\n# region prepare the API call\napi_server = pc_ip\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/clusters\/list\"\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\npayload = {\n    \"kind\": \"cluster\"\n}\n# endregion\n\n# region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n\n# region process results\nif resp.ok:\n    print(\"Request was successful\")\n    json_resp = json.loads(resp.content)\n    for cluster in json_resp['entities']:\n        if cluster['spec']['name'] == nutanix_cluster_name:\n            print(\"nutanix_cluster_uuid={}\".format(cluster['metadata']['uuid']))\n    exit(0)\nelse:\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n# endregion\n","eval_variables":["nutanix_cluster_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetCalmRolesUuid","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# *             stephane.bourdeaud@emeagso.lab\n# * version:    2019\/09\/17\n# task_name:    GetCalmRolesUuid\n# description:  Gets the UUID for the \"Project Admin\", \"Developer\" and \n#               \"Consumer\" roles.\n# output vars:  project_admin_role_uuid, developer_role_uuid, consumer_role_uuid\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\n# endregion\n\n#region define variables\nproject_admin_role_uuid = \"\"\ndeveloper_role_uuid = \"\"\nconsumer_role_uuid = \"\"\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/roles\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\": \"role\", \n    \"length\":length, \n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process results\nif resp.ok:\n    print(\"Request was successful; processing results...\")\n    json_resp = json.loads(resp.content)\n    #process each valid vlan range\n    for role in json_resp['entities']:\n        if role['status']['name'] == \"Project Admin\":\n            project_admin_role_uuid = role['metadata']['uuid']\n        if role['status']['name'] == \"Developer\":\n            developer_role_uuid = role['metadata']['uuid']\n        if role['status']['name'] == \"Consumer\":\n            consumer_role_uuid = role['metadata']['uuid']\n    print(\"project_admin_role_uuid={}\".format(project_admin_role_uuid))\n    print(\"developer_role_uuid={}\".format(developer_role_uuid))\n    print(\"consumer_role_uuid={}\".format(consumer_role_uuid))\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n#endregion","eval_variables":["project_admin_role_uuid","developer_role_uuid","consumer_role_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetCalmEnvUuid","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/17\n# task_name:    GetCalmEnvUuid\n# description:  Get existing project environments from Calm.\n# output vars:  environment_uuid\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\n#endregion\n\n#region define variables\nenvironment_uuids = []\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/environments\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n  \"kind\": \"environment\",\n  \"offset\": 0,\n  \"length\": length\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    for environment in json_resp['entities']:\n        environment_uuids.append(environment['metadata']['uuid'])\n    print(\"environment_uuid={}\".format(environment_uuids[0]))\n    exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","eval_variables":["environment_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetUserProjects","state":"ACTIVE","attrs":{"script":"# region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     Bogdan-Nicolae.MITU@ext.eeas.europa.eu,\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/18\n# task_name:    GetUserProjects\n# description:  Counts how many projects a user owns.\n#               Returns an error if the count is too high.\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nnutanix_calm_user_uuid = \"@@{nutanix_calm_user_uuid}@@\"\nnutanix_calm_user_name = \"@@{calm_username}@@\"\n# endregion\n\n#region define variables\nmax_project_count = 3\nuser_project_count = 0\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/projects\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\":\"project\",\n    \"length\":length,\n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['length']))\n    for project in json_resp['entities']:\n        print(\"Comparing {} with {}\".format(nutanix_calm_user_uuid,project['metadata']['owner_reference']['uuid']))\n        if nutanix_calm_user_uuid == project['metadata']['owner_reference']['uuid']:\n            user_project_count = user_project_count + 1\n    while json_resp['metadata']['length'] is length:\n        payload = {\n            \"kind\": \"project\",\n            \"length\":length,\n            \"offset\": json_resp['metadata']['length'] + json_resp['metadata']['offset'] + 1\n        }\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['offset'] + json_resp['metadata']['length']))\n            for project in json_resp['entities']:\n                print(\"Comparing {} with {}\".format(nutanix_calm_user_uuid,project['metadata']['owner_reference']['uuid']))\n                if nutanix_calm_user_uuid == project['metadata']['owner_reference']['uuid']:\n                    user_project_count = user_project_count + 1\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    if user_project_count >= max_project_count:\n        print(\"User {0} already owns {1} projects which is greater than the maximum allowed ({2})\".format(nutanix_calm_user_name,user_project_count,max_project_count))\n        exit(1)\n    else:\n        print(\"User {0} owns {1} projects which is lower than the maximum allowed ({2})\".format(nutanix_calm_user_name,user_project_count,max_project_count))\n        exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetAhvNetwork","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019\/09\/16\n# task_name:    GetAhvNetwork\n# description:  Given multiple ranges of VLAN ids and a target AHV cluster, \n#               determine which one is available (not existing already on the \n#               AHV cluster) which has the lowest id.\n# output vars:  project_vlan_id\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nnutanix_cluster_uuid = \"@@{nutanix_cluster_uuid}@@\"\n# endregion\n\n#region define variables\n#* define here which vlan ranges are valid\nvlan_ranges = [\n    range(10,110)\n]\nproject_vlan_id = \"\"\n#endregion\n\n#region retrieve existing networks on the AHV cluster\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/subnets\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\": \"subnet\", \n    \"length\":length, \n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process results\nif resp.ok:\n    print(\"Request was successful; processing results...\")\n    #process each valid vlan range\n    for valid_vlan_range in vlan_ranges:\n        #process each vlan id in this range\n        for valid_vlan in valid_vlan_range:\n            #process all returned values (ahv networks)\n            vlan_match = False\n            for ahv_vlans in json.loads(resp.content)['entities']:\n                if valid_vlan == int(ahv_vlans['spec']['resources']['vlan_id']):\n                    #TODO add code here to check the cluster reference\n                    if nutanix_cluster_uuid == ahv_vlans['spec']['cluster_reference']['uuid']:\n                        #this vlan is already defined on the AHV cluster\n                        vlan_match = True\n            if vlan_match is False:\n                #we have already found a valid and available vlan, so break out \n                # of the loop\n                project_vlan_id = valid_vlan\n                break\n        if project_vlan_id:\n                #we have already found a valid and available vlan, so break out \n                # of the loop\n                break\n    if project_vlan_id == \"\":\n        #we couldn't find an available vlan id\n        print(\"There is no vlan id available on this cluster.\")\n        exit(1)\n    else:\n        #we found an available and valid vlan id\n        print(\"A valid vlan id was found.\")\n        print(\"project_vlan_id={}\".format(project_vlan_id))\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n#endregion","eval_variables":["project_vlan_id"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"NewAhvNetwork","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019\/09\/17\n# task_name:    NewAhvNetwork\n# description:  Given a vlan id, create an ipam managed network in AHV.\n# output vars:  ahv_network_uuid, ahv_network_name\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_vlan_id = \"@@{project_vlan_id}@@\"\nnutanix_cluster_uuid = \"@@{nutanix_cluster_uuid}@@\"\n# endregion\n\n#region define variables\ndns_server = \"8.8.8.8\"\nahv_network_name = \"belbru-nut-vlan{}test\".format(project_vlan_id)\nahv_network_address = \"10.55.{}.0\".format(project_vlan_id)\nahv_network_prefix = \"24\"\nahv_network_gw = \"10.55.{}.1\".format(project_vlan_id)\nahv_network_pool_range = \"10.55.{0}.2 10.55.{0}.253\".format(project_vlan_id)\n#endregion\n\n#region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v0.8\/networks?proxyClusterUuid={}\".format(nutanix_cluster_uuid)\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"name\":ahv_network_name,\n    \"vlanId\":project_vlan_id,\n    \"ipConfig\":{\"dhcpOptions\":{\"domainNameServers\":dns_server},\n    \"networkAddress\":ahv_network_address,\n    \"prefixLength\":ahv_network_prefix,\n    \"defaultGateway\":ahv_network_gw,\n    \"pool\":[{\"range\":ahv_network_pool_range}]}\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process results\nif resp.ok:\n    print(\"AHV network was successfully created.\")\n    json_resp = json.loads(resp.content)\n    print(\"ahv_network_uuid={}\".format(json_resp['networkUuid']))\n    print(\"ahv_network_name={}\".format(ahv_network_name))\n    exit(0)\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n#endregion","eval_variables":["ahv_network_uuid","ahv_network_name"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"NewCalmProject","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019\/09\/17\n# task_name:    NewCalmProject\n# description:  Create a new project in different sizes: small, medium, large, configured with an unique VlanID, with project owner having the \"Project Admin role\".\n# output vars:  project_name, project_uuid\n# endregion\n\n#region capture Calm variables\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nrand_num = \"@@{calm_unique}@@\"\ncalm_user_upn = \"@@{calm_username}@@\"\nnutanix_calm_user_uuid = \"@@{nutanix_calm_user_uuid}@@\"\nahv_network_uuid = \"@@{ahv_network_uuid}@@\"\nproject_vlan_id = \"@@{project_vlan_id}@@\"\nproject_size = \"@@{project_size}@@\"\nenvironment_uuid = \"@@{environment_uuid}@@\"\n#input from user\nuser_project_name = \"@@{user_project_name}@@\"\n#endregion\n\n#region define variables\nproject_name = \"{0}_VPC{1}_{2}\".format(user_project_name,project_vlan_id,rand_num)\nmax_vcpu = 4\nmax_memory = 16*1073741824\nmax_storage = 200*1073741824\nmedium_multiplier = 2\nlarge_multiplier = 4\nif project_size == \"medium\":\n   max_vcpu = max_vcpu*medium_multiplier\n   max_memory = max_memory*medium_multiplier\n   max_storage = max_storage*medium_multiplier   \nif project_size == \"large\":\n   max_vcpu = max_vcpu*large_multiplier\n   max_memory = max_memory*large_multiplier\n   max_storage = max_storage*large_multiplier \n# endregion\n\n#region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/projects_internal\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n   \"api_version\":\"3.1.0\",\n   \"metadata\":{\n      \"kind\":\"project\",\n      \"owner_reference\": {\n            \"kind\": \"user\",\n            \"uuid\": nutanix_calm_user_uuid,\n            \"name\": calm_user_upn\n        }\n   },\n   \"spec\":{\n      \"project_detail\":{\n         \"name\":project_name,\n         \"description\":\"Created for {}\".format(calm_user_upn),\n         \"resources\":{\n            \"subnet_reference_list\":[\n               {\n                  \"kind\":\"subnet\",\n                  \"uuid\":ahv_network_uuid\n               }\n            ],\n            \"resource_domain\":{\n               \"resources\":[\n                  {\n                     \"limit\":max_vcpu,\n                     \"resource_type\":\"VCPUS\"\n                  },\n                  {\n                     \"limit\":max_storage,\n                     \"resource_type\":\"STORAGE\"\n                  },\n                  {\n                     \"limit\":max_memory,\n                     \"resource_type\":\"MEMORY\"\n                  }\n               ]\n            },\n            \"user_reference_list\":[],\n            \"external_user_group_reference_list\":[],\n            \"environment_reference_list\": [\n               {\n                  \"kind\": \"environment\",\n                  \"uuid\": environment_uuid\n               }\n            ],\n         }\n      },\n      \"user_list\": [],\n      \"user_group_list\": [],\n      \"access_control_policy_list\": []\n   }\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n\n#region process the results\nif resp.ok:\n   print json.dumps(json.loads(resp.content), indent=4)\n   print \"project_name={0}\".format(json.loads(resp.content)['spec']['project_detail']['name'])\n   print \"project_uuid={0}\".format(json.loads(resp.content)['metadata']['uuid'])\n   exit(0)\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion","eval_variables":["project_uuid","project_name"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetAdGroup","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     Bogdan-Nicolae.MITU@ext.eeas.europa.eu,\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/17\n# task_name:    GetAdGroup\n# description:  Given an AD group, return information from the directory.\n# output vars:  ad_group_name,ad_group_dn\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_vlan_id = \"@@{project_vlan_id}@@\"\ndirectory_uuid = \"@@{directory_uuid}@@\"\n#endregion\n\n#region define variables\nad_group_name = \"NUT_EEAS_R_TLAB{}Admins\".format(project_vlan_id)\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/directory_services\/{}\/search\".format(directory_uuid)\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"query\":ad_group_name,\n    \"returned_attribute_list\":[\n        \"memberOf\",\n        \"member\",\n        \"userPrincipalName\",\n        \"distinguishedName\"\n    ],\n    \"searched_attribute_list\":[\n        \"name\",\n        \"userPrincipalName\",\n        \"distinguishedName\"\n    ]\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    if len(json_resp['search_result_list']) == 0:\n        print(\"The Active Directory group {} does not exist.\".format(ad_group_name))\n        exit(1)\n    else:\n        print(\"The Active Directory group {} exists.\".format(ad_group_name))\n        ad_group_dn = json_resp['search_result_list'][0]['attribute_list'][0]['value_list'][0]\n        print(\"ad_group_name={}\".format(ad_group_name))\n        print(\"ad_group_dn={}\".format(ad_group_dn))\n        exit(0)\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","eval_variables":["ad_group_name","ad_group_dn"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"GetAdGroupUuid","state":"ACTIVE","attrs":{"exit_status":[],"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     Bogdan-Nicolae.MITU@ext.eeas.europa.eu,\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/17\n# task_name:    GetAdGroupUuid\n# description:  Given an AD group, return information from the directory.\n# output vars:  ad_group_uuid\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_vlan_id = \"@@{project_vlan_id}@@\"\ndirectory_uuid = \"@@{directory_uuid}@@\"\nad_group_dn = \"@@{ad_group_dn}@@\"\nad_group_name = \"@@{ad_group_name}@@\"\nnutanix_calm_user_upn = \"@@{calm_username}@@\"\n#endregion\n\n#region define variables\nad_group_uuid = \"\"\n#endregion\n\n# region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/user_groups\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"kind\":\"user_group\",\n    \"length\":length,\n    \"offset\":0\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['length']))\n    #look at each group and determine if it matches our AD group for this project\n    for directory_group in json_resp['entities']:\n        print(\"Comparing {0} with {1}\".format(ad_group_dn.lower(),directory_group['status']['resources']['directory_service_user_group']['distinguished_name']))\n        if ad_group_dn.lower() == directory_group['status']['resources']['directory_service_user_group']['distinguished_name']:\n            ad_group_uuid = directory_group['metadata']['uuid']\n            print(\"ad_group_uuid={}\".format(ad_group_uuid))\n            exit(0)\n    while json_resp['metadata']['length'] is length:\n        payload = {\n            \"kind\": \"user\",\n            \"length\":length,\n            \"offset\": json_resp['metadata']['length'] + json_resp['metadata']['offset'] + 1\n        }\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Processing results from {} to {}\".format(json_resp['metadata']['offset'], json_resp['metadata']['offset'] + json_resp['metadata']['length']))\n            for directory_group in json_resp['entities']:\n                print(\"Comparing {0} with {1}\".format(ad_group_dn,directory_group['status']['resources']['directory_service_user_group']['distinguished_name']))\n                if ad_group_dn == directory_group['status']['resources']['directory_service_user_group']['distinguished_name']:\n                    ad_group_uuid = directory_group['metadata']['uuid']\n                    print(\"ad_group_uuid={}\".format(ad_group_uuid))\n                    exit(0)\n        else:\n            print(\"Request failed\")\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(json.dumps(payload)))\n            print('Status code: {}'.format(resp.status_code))\n            print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n            exit(1)\n    if ad_group_uuid == \"\":\n        print(\"Group {} does not have a UUID in Prism Central. Creating UUID...\".format(ad_group_name))\n        #region create idempotence identifier\n        # region prepare api call\n        api_server_port = \"9440\"\n        api_server_endpoint = \"\/api\/nutanix\/v3\/idempotence_identifiers\"\n        length = 100\n        url = \"https:\/\/{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"POST\"\n        headers = {\n            'Content-Type': 'application\/json',\n            'Accept': 'application\/json'\n        }\n\n        # Compose the json payload\n        payload = {\n            \"count\": 1,\n            \"client_identifier\": nutanix_calm_user_upn,\n            \"valid_duration_in_minutes\": 2\n        }\n        # endregion\n\n        #region make the api call\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n\n        #region process results\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            nutanix_calm_idempotence_identifier = json_resp['uuid_list'][0]\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request to create idempotence identifier failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\n        #endregion\n\n        #region create AD group UUID\n        # region prepare api call\n        api_server_port = \"9440\"\n        api_server_endpoint = \"\/api\/nutanix\/v3\/idempotence_identifiers\/salted\"\n        length = 100\n        url = \"https:\/\/{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"POST\"\n        headers = {\n            'Content-Type': 'application\/json',\n            'Accept': 'application\/json'\n        }\n\n        # Compose the json payload\n        payload = {\n            \"name_list\":[ad_group_name]\n        }\n        # endregion\n\n        #region make the api call\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n\n        #region process results\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            print(\"Successfully created UUID for AD group {}\".format(ad_group_name))\n            print(json_resp)\n            ad_group_uuid = json_resp['name_uuid_list'][0][ad_group_name]\n            print(\"ad_group_uuid={}\".format(ad_group_uuid))\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request to create UUID failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\n        #endregion\n    else:\n        exit(0)   \nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n# endregion","eval_variables":["ad_group_uuid"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"SetCalmProjectAcp","state":"ACTIVE","attrs":{"script":"# region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019\/09\/17\n# task_name:    SetCalmProjectAcp\n# description:  Configures the Access Control Policy on a Calm project, which\n#               will effectively define user and group permissions on that \n#               project.\n# endregion\n\n#region capture Calm variables\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\ncalm_user_uuid = \"@@{nutanix_calm_user_uuid}@@\"\ncalm_user_upn = \"@@{calm_username}@@\"\nad_group_name = \"@@{ad_group_name}@@\"\nad_group_uuid = \"@@{ad_group_uuid}@@\"\nad_group_dn = \"@@{ad_group_dn}@@\"\nproject_admin_role_uuid = \"@@{project_admin_role_uuid}@@\"\ndeveloper_role_uuid = \"@@{developer_role_uuid}@@\"\nconsumer_role_uuid = \"@@{consumer_role_uuid}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\ndirectory_uuid = \"@@{directory_uuid}@@\"\nnutanix_cluster_uuid = \"@@{nutanix_cluster_uuid}@@\"\n#endregion\n\n#region prepare api call (get project)\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/projects_internal\/{}\".format(project_uuid)\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"GET\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n#endregion\n\n#region make the api call (get project)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    headers=headers,\n    verify=False\n)\n# endregion\n\n#region process the results (get project)\nif resp.ok:\n   print(\"Successfully retrieved project details for project with uuid {}\".format(project_uuid))\n   project_json = json.loads(resp.content)\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n\n#region prepare api call (update project with acp)\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/projects_internal\/{}\".format(project_uuid)\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"PUT\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\nif len(str(project_json['spec']['access_control_policy_list'])) > 2:\n    print \"ACP is not null\"\n    exit (1)\nelse:\n    print \"ACP is null\"\n    #removing stuff we don't need for the update\n    project_json['metadata'].pop('owner_reference', None)\n    project_json.pop('status', None)\n    project_json['metadata'].pop('create_time', None)\n    #region adding group information\n    add_acp_group = {\n                \"operation\": \"ADD\",\n                \"acp\": {\n                    \"name\": \"nuCalmAcp-\"+str(uuid.uuid4()),\n                    \"resources\": {\n                        \"role_reference\": {\n                            \"kind\": \"role\",\n                            \"uuid\": consumer_role_uuid\n                        },\n                        \"user_reference_list\": [],\n                        \"filter_list\": {\n                            \"context_list\": [\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"ALL\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        }\n                                    ],\n                                    \"scope_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": \"PROJECT\",\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    project_uuid\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"entity_filter_expression_list\": [\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"image\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"marketplace_item\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"SELF_OWNED\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"app_icon\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"category\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"collection\": \"ALL\"\n                                            }\n                                        },\n                                        {\n                                            \"operator\": \"IN\",\n                                            \"left_hand_side\": {\n                                                \"entity_type\": \"cluster\"\n                                            },\n                                            \"right_hand_side\": {\n                                                \"uuid_list\": [\n                                                    nutanix_cluster_uuid\n                                                ]\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        },\n                        \"user_group_reference_list\": [\n                        {\n                            \"kind\": \"user_group\",\n                            \"uuid\": ad_group_uuid\n                        }\n                        ]\n                    },\n                    \"description\": \"ACPDescription-\"+str(uuid.uuid4())\n                },\n                \"metadata\": {\n                    \"kind\": \"access_control_policy\"\n                }\n            }\n    project_json['spec']['access_control_policy_list'].append(add_acp_group)\n    add_group = {\n        \"kind\": \"user_group\",\n        \"uuid\": ad_group_uuid\n    }\n    project_json['spec']['project_detail']['resources']['external_user_group_reference_list'].append(add_group)\n    spec_addgroup = {\n            \"metadata\": {\n                \"kind\": \"user_group\",\n                \"uuid\": ad_group_uuid\n            },\n            \"user_group\": {\n                \"resources\": {\n                    \"directory_service_user_group\": {\n                        \"distinguished_name\": ad_group_dn\n                    }\n                }\n            },\n            \"operation\": \"ADD\"\n    }\n    project_json['spec']['user_group_list'].append(spec_addgroup)\n    #endregion\n    #region adding user information\n    add_acp_user = {\n        \"operation\": \"ADD\",\n        \"acp\": {\n            \"name\": \"nuCalmAcp-\"+str(uuid.uuid4()),\n            \"resources\": {\n                \"role_reference\": {\n                    \"kind\": \"role\",\n                    \"uuid\": project_admin_role_uuid\n                },\n                \"user_reference_list\": [\n                    {\n                        \"kind\": \"user\",\n                        \"uuid\": calm_user_uuid\n                    }\n                ],\n                \"filter_list\": {\n                    \"context_list\": [\n                        {\n                            \"entity_filter_expression_list\": [\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": {\n                                        \"entity_type\": \"ALL\"\n                                    },\n                                    \"right_hand_side\": {\n                                        \"collection\": \"ALL\"\n                                    }\n                                }\n                            ],\n                            \"scope_filter_expression_list\": [\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": \"PROJECT\",\n                                    \"right_hand_side\": {\n                                        \"uuid_list\": [\n                                            project_uuid\n                                        ]\n                                    }\n                                }\n                            ]\n                        },\n                        {\n                            \"entity_filter_expression_list\": [\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": {\n                                        \"entity_type\": \"image\"\n                                    },\n                                    \"right_hand_side\": {\n                                        \"collection\": \"ALL\"\n                                    }\n                                },\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": {\n                                        \"entity_type\": \"marketplace_item\"\n                                    },\n                                    \"right_hand_side\": {\n                                        \"collection\": \"SELF_OWNED\"\n                                    }\n                                },\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": {\n                                        \"entity_type\": \"app_icon\"\n                                    },\n                                    \"right_hand_side\": {\n                                        \"collection\": \"ALL\"\n                                    }\n                                },\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": {\n                                        \"entity_type\": \"category\"\n                                    },\n                                    \"right_hand_side\": {\n                                        \"collection\": \"ALL\"\n                                    }\n                                },\n                                {\n                                    \"operator\": \"IN\",\n                                    \"left_hand_side\": {\n                                        \"entity_type\": \"cluster\"\n                                    },\n                                    \"right_hand_side\": {\n                                        \"uuid_list\": [\n                                            nutanix_cluster_uuid\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"user_group_reference_list\": []\n            },\n            \"description\": \"ACPDescription-\"+str(uuid.uuid4())\n        },\n        \"metadata\": {\n            \"kind\": \"access_control_policy\"\n        }\n    }\n    project_json['spec']['access_control_policy_list'].append(add_acp_user)\n    add_user = {\n        \"kind\": \"user\",\n        \"uuid\": calm_user_uuid\n    }\n    project_json['spec']['project_detail']['resources']['user_reference_list'].append(add_user)\n    spec_adduser = {\n        \"metadata\": {\n            \"kind\": \"user\",\n            \"uuid\": calm_user_uuid\n        },\n        \"user\": {\n            \"resources\": {\n                \"directory_service_user\": {\n                    \"directory_service_reference\": {\n                        \"kind\": \"directory_service\",\n                        \"uuid\": directory_uuid\n                    },\n                    \"user_principal_name\": calm_user_upn\n                }\n            }\n        },\n        \"operation\": \"ADD\"\n    }\n    project_json['spec']['user_list'].append(spec_adduser)\n    #endregion\npayload = project_json\n#endregion\n\n#region make the api call (update project with acp)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process the results (update project with acp)\nif resp.ok:\n    print(\"Successfully updated the project with uuid {}\".format(project_uuid))\n    exit(0)\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(json.dumps(payload)))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n#endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"SetCalmProjectBp","state":"ACTIVE","attrs":{"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019\/09\/17\n# task_name:    SetCalmProjectBp\n# description:  Publish existing CALM Blueprints on the new project created. \n#               Blueprints will be added into a list, which will be populated by\n#               Nutanix Admins and stored on a CALM macro.\n# endregion\n\n#region capture Calm variables\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_name = \"@@{project_name}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\n# endregion\n\n#region prepare api call (get marketplace items)\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/marketplace_items\/list\"\nlength = 100\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"POST\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n\n# Compose the json payload\npayload = {\n    \"filter\":\"app_state==PUBLISHED\",\n    \"length\":length\n}\n# endregion\n#region make the api call (get marketplace items)\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    params=json.dumps(payload),\n    headers=headers,\n    verify=False\n)\n# endregion\n#region process the results (get marketplace items)\nif resp.ok:\n    json_resp = json.loads(resp.content)\n    marketplace_items = json_resp['entities']\n    #process each marketplace item\n    for marketplace_item in marketplace_items:\n        marketplace_item_uuid = marketplace_item['metadata']['uuid']\n        #region prepare api call (get marketplace information)\n        api_server_endpoint = \"\/api\/nutanix\/v3\/calm_marketplace_items\/{}\".format(marketplace_item_uuid)\n        url = \"https:\/\/{}:{}{}\".format(\n            api_server,\n            api_server_port,\n            api_server_endpoint\n        )\n        method = \"GET\"\n        #endregion\n        #region make the api call (get marketplace information)\n        print(\"Making a {} API call to {}\".format(method, url))\n        resp = urlreq(\n            url,\n            verb=method,\n            auth='BASIC',\n            user=username,\n            passwd=username_secret,\n            params=json.dumps(payload),\n            headers=headers,\n            verify=False\n        )\n        #endregion\n        #region process results (get marketplace information)\n        if resp.ok:\n            json_resp = json.loads(resp.content)\n            json_resp['metadata'].pop('owner_reference', None)\n            json_resp.pop('status', None)\n            json_resp['metadata'].pop('create_time', None)\n            marketplace_item_project =  {\n                \"kind\": \"project\",\n                \"name\": project_name,\n                \"uuid\": project_uuid\n            }\n            json_resp['spec']['resources']['project_reference_list'].append(marketplace_item_project)\n            #region prepare the api call (publish marketplace item to project)\n            payload = json_resp\n            method = \"PUT\"\n            #endregion\n            #region make the api call (publish marketplace item to project)\n            print(\"Making a {} API call to {}\".format(method, url))\n            resp = urlreq(\n                url,\n                verb=method,\n                auth='BASIC',\n                user=username,\n                passwd=username_secret,\n                params=json.dumps(payload),\n                headers=headers,\n                verify=False\n            )\n            #endregion\n            #region process results (publish marketplace item to project)\n            if resp.ok:\n                print \"Marketplace item with uuid {} is published.\".format(marketplace_item_uuid)\n            else:\n                # print the content of the response (which should have the error message)\n                print(\"Request failed\", json.dumps(\n                    json.loads(resp.content),\n                    indent=4\n                ))\n                print(\"Headers: {}\".format(headers))\n                print(\"Payload: {}\".format(payload))\n                exit(1)\n            #endregion\n        else:\n            # print the content of the response (which should have the error message)\n            print(\"Request failed\", json.dumps(\n                json.loads(resp.content),\n                indent=4\n            ))\n            print(\"Headers: {}\".format(headers))\n            print(\"Payload: {}\".format(payload))\n            exit(1)\n        #endregion\nelse:\n    # print the content of the response (which should have the error message)\n    print(\"Request failed\", json.dumps(\n        json.loads(resp.content),\n        indent=4\n    ))\n    print(\"Headers: {}\".format(headers))\n    print(\"Payload: {}\".format(payload))\n    exit(1)\n#endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Readme","state":"ACTIVE","attrs":{"script":"# region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# *             stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/18\n# task_name:    Readme\n# description:  Prints information about the project that was just created. \n# endregion\n\n#region capture Calm variables\nahv_network_name = \"@@{ahv_network_name}@@\"\nusername = \"@@{calm_username}@@\"\nad_group_name = \"@@{ad_group_name}@@\"\nproject_name = \"@@{project_name}@@\"\nproject_size = \"@@{project_size}@@\"\n#endregion\n\n#region processing\nprint(\"********** Your Project Information **********\\n\")\nprint(\"   Project Name: {}\".format(project_name))\nprint(\"   Project Size: {}\".format(project_size))\nprint(\"   Project Owner: {}\".format(username))\nprint(\"   Active Directory Group for Consumers: {}\".format(ad_group_name))\nprint(\"   Network Name: {}\".format(ahv_network_name))\nprint(\"\\n**********************************************\")\n#endregion\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"c386af88_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"826e1ad1_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package1"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"RemoveAhvNetwork"},{"kind":"app_task","name":"RemoveCalmProject"}],"name":"42586302_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"RemoveAhvNetwork"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"RemoveCalmProject"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"RemoveAhvNetwork","state":"ACTIVE","attrs":{"script":"#region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     stephane.bourdeaud@nutanix.com\n# * version:    2019\/09\/18\n# task_name:    RemoveAhvNetwork\n# description:  Given an AHV subnet UUID, delete that subnet from the AHV\n#               cluster.\n# endregion\n\n#region capture Calm variables\nusername = '@@{pc.username}@@'\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nahv_network_uuid = \"@@{ahv_network_uuid}@@\"\n# endregion\n\n#region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/subnets\/{}\".format(ahv_network_uuid)\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"DELETE\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    headers=headers,\n    verify=False\n)\n#endregion\n\n#region process results\nif resp.ok:\n    print(\"AHV network was successfully deleted.\")\n    json_resp = json.loads(resp.content)\n    exit(0)\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n#endregion","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"PrismCentralService"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"RemoveCalmProject","state":"ACTIVE","attrs":{"script":"# region headers\n# escript-template v20190611 \/ stephane.bourdeaud@nutanix.com\n# * author:     MITU Bogdan Nicolae (EEAS-EXT) <Bogdan-Nicolae.MITU@ext.eeas.europa.eu>\n# * version:    2019\/09\/18\n# task_name:    RemoveCalmProject\n# description:  Given a Calm project UUID, delete that project from Calm. \n# endregion\n\n#region capture Calm variables\nusername = \"@@{pc.username}@@\"\nusername_secret = \"@@{pc.secret}@@\"\napi_server = \"@@{pc_ip}@@\"\nproject_uuid = \"@@{project_uuid}@@\"\n#endregion\n\n#region prepare api call\napi_server_port = \"9440\"\napi_server_endpoint = \"\/api\/nutanix\/v3\/projects\/{}\".format(project_uuid)\nurl = \"https:\/\/{}:{}{}\".format(\n    api_server,\n    api_server_port,\n    api_server_endpoint\n)\nmethod = \"DELETE\"\nheaders = {\n    'Content-Type': 'application\/json',\n    'Accept': 'application\/json'\n}\n# endregion\n\n#region make the api call\nprint(\"Making a {} API call to {}\".format(method, url))\nresp = urlreq(\n    url,\n    verb=method,\n    auth='BASIC',\n    user=username,\n    passwd=username_secret,\n    headers=headers,\n    verify=False\n)\n# endregion\n\n\n#region process the results\nif resp.ok:\n    print(\"Project was successfully deleted.\")\n    json_resp = json.loads(resp.content)\n    exit(0)\nelse:\n    #api call failed\n    print(\"Request failed\")\n    print(\"Headers: {}\".format(headers))\n    print('Status code: {}'.format(resp.status_code))\n    print('Response: {}'.format(json.dumps(json.loads(resp.content), indent=4)))\n    exit(1)\n# endregion\n","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"21c7f40d_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"42586302_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"depends_on_list":[],"name":"1299c8e2_deployment","published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package1"}],"substrate_local_reference":{"kind":"app_substrate","name":"PrismCentralVM"},"min_replicas":"1","variable_list":[],"description":""}],"description":"","action_list":[],"name":"Default","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"pc_ip","value":"127.0.0.1","label":"","attrs":{"type":""},"editables":{"value":false},"is_hidden":true,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"project_type","value":"Dev","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["Production","Dev"]}},{"regex":{"should_validate":false,"value":"^.*$"},"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"project_size","value":"small","label":"","attrs":{"type":"LOCAL"},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":["small","medium","large"]}},{"val_type":"STRING","is_mandatory":true,"description":"","data_type":"BASE","type":"LOCAL","name":"user_project_name","value":"eeas-project-","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"pc"},"type":"USER"},"name":"stephane-eeas-vpc-v1"},"api_version":"3.0","metadata":{"last_update_time":"1568816799537973","kind":"blueprint","spec_version":100,"creation_time":"1568637423510433","name":"stephane-eeas-vpc-v1"}}